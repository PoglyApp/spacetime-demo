// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, DatabaseTable, AlgebraicValue, ReducerEvent, Identity, Address, ClientDB, SpacetimeDBClient } from "@clockworklabs/spacetimedb-sdk";

export class Guest extends DatabaseTable
{
	public static db: ClientDB = __SPACETIMEDB__.clientDB;
	public static tableName = "Guest";
	public id: number;
	public identity: Identity;

	public static primaryKey: string | undefined = "id";

	constructor(id: number, identity: Identity) {
	super();
		this.id = id;
		this.identity = identity;
	}

	public static serialize(value: Guest): object {
		return [
		value.id, Array.from(value.identity.toUint8Array())
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("id", AlgebraicType.createPrimitiveType(BuiltinType.Type.U32)),
			new ProductTypeElement("identity", AlgebraicType.createProductType([
			new ProductTypeElement("__identity_bytes", AlgebraicType.createArrayType(AlgebraicType.createPrimitiveType(BuiltinType.Type.U8))),
		])),
		]);
	}

	public static fromValue(value: AlgebraicValue): Guest
	{
		let productValue = value.asProductValue();
		let __Id = productValue.elements[0].asNumber();
		let __Identity = new Identity(productValue.elements[1].asProductValue().elements[0].asBytes());
		return new this(__Id, __Identity);
	}

	public static *filterById(value: number): IterableIterator<Guest>
	{
		for (let instance of this.db.getTable("Guest").getInstances())
		{
			if (instance.id === value) {
				yield instance;
			}
		}
	}

	public static findById(value: number): Guest | undefined
	{
		return this.filterById(value).next().value;
	}

	public static *filterByIdentity(value: Identity): IterableIterator<Guest>
	{
		for (let instance of this.db.getTable("Guest").getInstances())
		{
			if (instance.identity.isEqual(value)) {
				yield instance;
			}
		}
	}

	public static findByIdentity(value: Identity): Guest | undefined
	{
		return this.filterByIdentity(value).next().value;
	}


}

export default Guest;
